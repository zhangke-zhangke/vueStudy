node_modules（文件夹，里面都是一些node启动前端的一些包）
public（文件夹，里面存放了一个favicon.ico图标）
src（文件夹，具体开发的功能在这下面）
	assets（文件夹，下面存放了全局的一些样式代码）
	components（组件文件夹，开发的代码可以在这下面）
		Pagination（分页组件）
			index.js
		Login（登录页面组件）
			index.js
		Count（）
			counter.vue
		……
	router（文件夹，全局路由）
		index.js
	store（文件夹，可选，由store创建的全局都可以访问。可以认为是全局变量）
		index.js
	utils（文件夹，里面可以创建对后端接口返回的统一处理，如接口返回code为500时，弹窗提示接口的返回的msg信息。）
	App.vue（主vue文件，<template>模板中可使用vue-router进行占位。）		
	main.js（主js文件，从这里初始、挂载app）		
index.html（文件，固定前端首页，里面插入了图标、/src/main.js等资源。）
package.json/package-lock.json（文件，罗列了前端项目所使用的包的详细信息。）
vite.config.js（文件，对后端接口做处理转换。）



---------------------------------------------------------------------


1、导入包的语句（from相对路径针对/scr/main.js导入）
	针对性导入：import { funA, funB } from '/Login'
	打包式导入：import Login from '/login'

2、定义变量
	常量：const
	变量：val
	临时量：let

3、标签标记
	<template #header>
	<template #footer>
	
	<script setup>

	<style scoped>

4、计算属性
	const xxx = computed()


5、响应式变量
	import { ref, reactive } from 'vue'

	const formRef = ref(null)
	const refList = ref([])
	const params = reactive({
		'p1': '',
		'p2': ''
	})


	list类型ref遍历
		// forEach接收一个回调函数，三个参数，分别为当前循环的值、当前循环的下标、遍历的数组
		refList.forEach(function (value,index,array) {  
		   array[index] = value * 10;  
		})
	
6、组件属性绑定
	当绑定的值是一个函数、计算属性或其他非字符串变量时，使用<childCom :title="() => '我是标题'" />绑定，若是字符串可直接绑定<childCom title="我是标题" />


------------------------------------------

1、使用element-ui组件样式需要在src/main.js引入element-plus
	1.1、安装element-plus
		npm install element-plus
	1.2、src/main.js引入并使用
		import ElementPlus from 'element-plus'
		import 'element-plus/dist/index.css'\
		import zhCn from 'element-plus/es/locale/lang/zh-cn' // 引入中文语言包

		app.use(ElementPlus, {
    			locale: zhCn,
  		})


-------------------pinia — defineStore------------------

1、主scr/main.js文件引入并注册使用
	import { createPinia } from 'pinia'
	app.use(createPinia())
	app.mount('#app')

2、创建src/stores文件夹存放所有定义的store
	userStore.js
	……

3、其他文件引入store使用
	import 'useUserStore' from '/src/stores/userStore.js'




-------------------defineProps-------------------------------

1、适用场景
	子组件(child)使用内置方法创建props
	const props = defineProps({
		title: String,
		count: Number
	})
	
	父组件引入子组件，并传入参数
	import child from 'src/components/childComponents/child.vue'
	
	<template>
		<child title="我是父组件传过去的title" count="我是父组件传过去的count">
	</template>




-----------------defineEmits-------------------------------------------





-----------------js 文件导出注意------------------------------------------

在.js文件定义的变量，需要导出（export）后才能够在其他文件中使用。
    1、命名导出（多变量可以一起导出）：
		export const xxx = []   
		对应其他文件引入使用：import { xxx } from 'xxx.js'

    2、默认导出（只能导出xxx）：
		const xxx = []
		export default xxx   
		对应其他文件引入使用：import xxx from 'xxx.js'




--------------------------------css 样式-------------------------------------------

1、弹性布局
	display: flex;
	flex-direction: column;	// 排列方向，默认为row横向，指定column改为纵向排列

2、div居中方法
	设置弹性布局，设置margin为auto即可

3、高度计算（100vh为视口高度）
	指定px
	指定百分比%
	calc计算
	
4、标签中文本居中
	text-align: center;

5、两个元素在一行，需要对其或配置行高时
	line-height: 20px; vertical-align: middle;	// 指定行高20px，使其元素内容在行高的中间。













